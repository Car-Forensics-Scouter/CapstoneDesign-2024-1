{"ast":null,"code":"var _jsxFileName = \"/Users/choseongbin/Desktop/Capstone/CapstoneDesign-2024-1/frontend/logger-react-app/src/pages/GraphDashboard.js\",\n  _s = $RefreshSig$();\nimport \"./GraphDashboard.css\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport axios from \"axios\";\nimport { errorAlert } from \"../components/alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultData = [{\n  \"deviceId\": \"-\",\n  \"timeStamp\": \"2024-01-01T00:00:00\",\n  \"vin\": \"-\",\n  \"speed\": 0.0,\n  \"rpm\": 0.0,\n  \"engineLoad\": 0.0,\n  \"fuelLevel\": 0.0,\n  \"barometricPressure\": 0.0,\n  \"coolantTemp\": 0.0,\n  \"throttlePos\": 0.0,\n  \"distance\": 0.0,\n  \"runTime\": 0.0,\n  \"lon\": 0.0,\n  \"lat\": 0.0\n}, {\n  \"deviceId\": \"-\",\n  \"timeStamp\": \"2024-01-01T00:01:00\",\n  \"vin\": \"-\",\n  \"speed\": 0.0,\n  \"rpm\": 0.0,\n  \"engineLoad\": 0.0,\n  \"fuelLevel\": 0.0,\n  \"barometricPressure\": 0.0,\n  \"coolantTemp\": 0.0,\n  \"throttlePos\": 0.0,\n  \"distance\": 0.0,\n  \"runTime\": 0.0,\n  \"lon\": 0.0,\n  \"lat\": 0.0\n}];\nfunction GraphDashboard(props) {\n  _s();\n  const [data, setData] = useState(defaultData); // 가져온 전체 데이터\n\n  const handleStartTimeChange = e => {\n    props.setStartTime(e.target.value);\n  };\n  const handleFinishTimeChange = e => {\n    props.setFinishTime(e.target.value);\n  };\n\n  // useCallback은 useEffect\n  const fetchData = useCallback(async () => {\n    try {\n      // 데이터 가져오는 함수 구성.\n      const url = \"http://localhost:8080/api/obdlog/date-range\";\n      const parameter = `${url}?deviceId=${encodeURIComponent(props.deviceId)}&startDate=${encodeURIComponent(props.startTime)}&endDate=${encodeURIComponent(props.finishTime)}`;\n      const response = await axios.get(parameter, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        console.log(\"그래프 데이터를 성공적으로 로드했습니다.\");\n\n        // 가져온 데이터들을 Data에 저장.\n        setData(response.data);\n        return;\n      } else {\n        errorAlert(\"그래프 데이터를 성공적으로 얻어오지 못 했습니다.\");\n        return;\n      }\n    } catch (error) {\n      if (error.response) {\n        console.error(\"응답 오류: \", error.response.data);\n        console.error(\"응답 상태: \", error.response.status);\n        console.error(\"응답 헤더: \", error.response.headers);\n      } else if (error.request) {\n        console.error(\"요청 오류: \", error.request);\n        errorAlert(\"서버 응답이 없습니다. 나중에 다시 시도해주세요.\");\n      } else {\n        console.error(\"데이터 요청 중 오류 발생: \", error.message);\n      }\n    }\n  }, [props.startTime, props.finishTime, props.deviceId]);\n\n  // startTime, finishTime 바뀔 때마다 fetchData 실행 \n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Download 버튼 누를 시 전체 데이터 가져옴.\n  const downloadData = () => {\n    const url = \"http://localhost:8080/api/obdlog/download\";\n    const parameter = `${url}?deviceId=${encodeURIComponent(props.deviceId)}&startDate=${encodeURIComponent(props.startTime)}&endDate=${encodeURIComponent(props.finishTime)}`;\n    const response = axios.get(parameter, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    });\n    response.blob().then(blob => {\n      const blobUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = blobUrl;\n      link.download = \"CFS_REPORT.xlsx\";\n      link.click();\n      window.URL.revokeObjectURL(blobUrl);\n    }).catch(e => console.error(\"Download error:\", e));\n  };\n\n  // 그래프 기본 옵션(SPEED에 기반해서 나머지 만듦)\n  const options = {\n    chart: {\n      type: \"area\",\n      height: 350,\n      background: \"#ffffff\"\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"straight\"\n    },\n    title: {\n      text: \"SPEED\",\n      align: \"left\"\n    },\n    // 데이터 이름\n    subtitle: {\n      text: \"km/h\",\n      align: \"left\"\n    },\n    // 데이터 단위\n    labels: [props.startTime, props.finishTime],\n    xaxis: {\n      type: \"datetime\"\n    },\n    yaxis: {\n      opposite: false\n    },\n    legend: {\n      horizontalAlign: \"left\"\n    }\n  };\n\n  // 그래프별 세부 옵션\n  const rpm_options = {\n    ...options,\n    title: {\n      text: \"RPM\"\n    },\n    subtitle: {\n      text: \"rpm\"\n    }\n  };\n  const engine_load_options = {\n    ...options,\n    title: {\n      text: \"ENGINE LOAD\"\n    },\n    subtitle: {\n      text: \"percent(%)\"\n    }\n  };\n  const throttle_pos_options = {\n    ...options,\n    title: {\n      text: \"THROTTLE POSITION\"\n    },\n    subtitle: {\n      text: \"\"\n    }\n  };\n  const fuel_level_options = {\n    ...options,\n    title: {\n      text: \"FUEL LEVEL\"\n    },\n    subtitle: {\n      text: \"LEVEL\"\n    }\n  };\n  const barometric_press_options = {\n    ...options,\n    title: {\n      text: \"BAROMETRIC PRESSURE\"\n    },\n    subtitle: {\n      text: \"℃\"\n    }\n  };\n  const run_time_options = {\n    ...options,\n    title: {\n      text: \"RUN TIME\"\n    },\n    subtitle: {\n      text: \"TIME(DAY:HH:MM\"\n    }\n  };\n  const distance_options = {\n    ...options,\n    title: {\n      text: \"DISTANCE\"\n    },\n    subtitle: {\n      text: \"℃\"\n    }\n  };\n  const coolant_temp_options = {\n    ...options,\n    title: {\n      text: \"COOLANT TEMPERATURE\"\n    },\n    subtitle: {\n      text: \"℃\"\n    }\n  };\n\n  // 데이터들 중 원하는 것만 취사 선택해서 그래프에 표시할 데이터로 포맷.\n  const getSeries = key => {\n    const series = [{\n      name: key,\n      data: data.map(item => ({\n        x: new Date(item.timeStamp).getTime(),\n        y: item[key] // 값이 없으면 0으로 초기화\n      }))\n    }];\n    return series;\n  };\n  console.log(getSeries(\"speed\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphs\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"head\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Data Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"download-button\",\n          onClick: downloadData,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa-solid fa-download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"download\",\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        color: \"#E5E5E5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-setting\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"TIME RANGE :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"from\",\n          children: \"FROM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"start-time\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            id: \"start\",\n            value: props.startTime,\n            onChange: handleStartTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"to\",\n          children: \"TO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"finish-time\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            id: \"finish\",\n            value: props.finishTime,\n            onChange: handleFinishTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(Chart, {\n          options: options,\n          series: getSeries(\"speed\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: rpm_options,\n          series: getSeries(\"rpm\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: engine_load_options,\n          series: getSeries(\"engineLoad\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: throttle_pos_options,\n          series: getSeries(\"throttlePos\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: fuel_level_options,\n          series: getSeries(\"fuelLevel\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: barometric_press_options,\n          series: getSeries(\"barometricPress\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: run_time_options,\n          series: getSeries(\"runTime\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: distance_options,\n          series: getSeries(\"distance\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: coolant_temp_options,\n          series: getSeries(\"coolantTemp\"),\n          type: \"area\",\n          height: 350\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphDashboard, \"aHifTyc5oI1gIpXYYORCyr0pvls=\");\n_c = GraphDashboard;\nexport default GraphDashboard;\nvar _c;\n$RefreshReg$(_c, \"GraphDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Chart","axios","errorAlert","jsxDEV","_jsxDEV","defaultData","GraphDashboard","props","_s","data","setData","handleStartTimeChange","e","setStartTime","target","value","handleFinishTimeChange","setFinishTime","fetchData","url","parameter","encodeURIComponent","deviceId","startTime","finishTime","response","get","headers","withCredentials","status","console","log","error","request","message","downloadData","blob","then","blobUrl","window","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","catch","options","chart","type","height","background","dataLabels","enabled","stroke","curve","title","text","align","subtitle","labels","xaxis","yaxis","opposite","legend","horizontalAlign","rpm_options","engine_load_options","throttle_pos_options","fuel_level_options","barometric_press_options","run_time_options","distance_options","coolant_temp_options","getSeries","key","series","name","map","item","x","Date","timeStamp","getTime","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","class","color","id","onChange","_c","$RefreshReg$"],"sources":["/Users/choseongbin/Desktop/Capstone/CapstoneDesign-2024-1/frontend/logger-react-app/src/pages/GraphDashboard.js"],"sourcesContent":["import \"./GraphDashboard.css\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport axios from \"axios\";  \r\nimport { errorAlert } from \"../components/alert\";\r\n\r\nconst defaultData = [\r\n    {\r\n        \"deviceId\": \"-\",\r\n        \"timeStamp\": \"2024-01-01T00:00:00\",\r\n        \"vin\": \"-\",\r\n        \"speed\": 0.0,\r\n        \"rpm\": 0.0,\r\n        \"engineLoad\": 0.0,\r\n        \"fuelLevel\": 0.0,\r\n        \"barometricPressure\": 0.0,\r\n        \"coolantTemp\": 0.0,\r\n        \"throttlePos\": 0.0,\r\n        \"distance\": 0.0,\r\n        \"runTime\": 0.0,\r\n        \"lon\": 0.0,\r\n        \"lat\": 0.0\r\n    },\r\n    {\r\n        \"deviceId\": \"-\",\r\n        \"timeStamp\": \"2024-01-01T00:01:00\",\r\n        \"vin\": \"-\",\r\n        \"speed\": 0.0,\r\n        \"rpm\": 0.0,\r\n        \"engineLoad\": 0.0,\r\n        \"fuelLevel\": 0.0,\r\n        \"barometricPressure\": 0.0,\r\n        \"coolantTemp\": 0.0,\r\n        \"throttlePos\": 0.0,\r\n        \"distance\": 0.0,\r\n        \"runTime\": 0.0,\r\n        \"lon\": 0.0,\r\n        \"lat\": 0.0\r\n    }\r\n]\r\n\r\nfunction GraphDashboard(props) {\r\n    const [data, setData] = useState(defaultData);   // 가져온 전체 데이터\r\n\r\n    const handleStartTimeChange = (e) => {\r\n        props.setStartTime(e.target.value);\r\n    };\r\n\r\n    const handleFinishTimeChange = (e) => {\r\n        props.setFinishTime(e.target.value);\r\n    };\r\n    \r\n    // useCallback은 useEffect\r\n    const fetchData = useCallback(async () => {\r\n        try {\r\n            // 데이터 가져오는 함수 구성.\r\n            const url = \"http://localhost:8080/api/obdlog/date-range\";\r\n            const parameter = `${url}?deviceId=${encodeURIComponent(props.deviceId)}&startDate=${encodeURIComponent(props.startTime)}&endDate=${encodeURIComponent(props.finishTime)}`;\r\n            const response = await axios.get(parameter, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                withCredentials: true\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                console.log(\"그래프 데이터를 성공적으로 로드했습니다.\");\r\n            \r\n                // 가져온 데이터들을 Data에 저장.\r\n                setData(response.data);\r\n                return\r\n            } else {\r\n                errorAlert(\"그래프 데이터를 성공적으로 얻어오지 못 했습니다.\");\r\n                return\r\n            }\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.error(\"응답 오류: \", error.response.data);\r\n                console.error(\"응답 상태: \", error.response.status);\r\n                console.error(\"응답 헤더: \", error.response.headers);\r\n              } else if (error.request) {\r\n                console.error(\"요청 오류: \", error.request);\r\n                errorAlert(\"서버 응답이 없습니다. 나중에 다시 시도해주세요.\");\r\n              } else {\r\n                console.error(\"데이터 요청 중 오류 발생: \", error.message);\r\n            }\r\n        }\r\n    }, [props.startTime, props.finishTime, props.deviceId]);\r\n\r\n    // startTime, finishTime 바뀔 때마다 fetchData 실행 \r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData])\r\n\r\n    // Download 버튼 누를 시 전체 데이터 가져옴.\r\n    const downloadData = () => {\r\n        const url = \"http://localhost:8080/api/obdlog/download\";\r\n        const parameter = `${url}?deviceId=${encodeURIComponent(props.deviceId)}&startDate=${encodeURIComponent(props.startTime)}&endDate=${encodeURIComponent(props.finishTime)}`;\r\n        const response = axios.get(parameter, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            withCredentials: true\r\n        });\r\n\r\n        response.blob().then((blob) => {\r\n            const blobUrl = window.URL.createObjectURL(blob);\r\n            const link = document.createElement(\"a\");\r\n            link.href = blobUrl;\r\n            link.download = \"CFS_REPORT.xlsx\";\r\n            link.click();\r\n            window.URL.revokeObjectURL(blobUrl);\r\n        }).catch((e) => console.error(\"Download error:\", e));\r\n    };\r\n\r\n \r\n    // 그래프 기본 옵션(SPEED에 기반해서 나머지 만듦)\r\n    const options = {\r\n        chart: { type: \"area\", height: 350, background: \"#ffffff\" },\r\n        dataLabels: { enabled: false },\r\n        stroke: { curve: \"straight\" },\r\n        title: { text: \"SPEED\", align: \"left\" },    // 데이터 이름\r\n        subtitle: { text: \"km/h\", align: \"left\" },  // 데이터 단위\r\n        labels: [props.startTime, props.finishTime],\r\n        xaxis: { type: \"datetime\", },\r\n        yaxis: { opposite: false, },\r\n        legend: { horizontalAlign: \"left\" }\r\n    };\r\n\r\n    // 그래프별 세부 옵션\r\n    const rpm_options = { ...options, title: { text: \"RPM\" }, subtitle: { text: \"rpm\"} }\r\n    const engine_load_options = { ...options, title: { text: \"ENGINE LOAD\" }, subtitle: { text: \"percent(%)\"} }\r\n    const throttle_pos_options = { ...options, title: { text: \"THROTTLE POSITION\" }, subtitle: { text: \"\" } }\r\n    const fuel_level_options = { ...options, title: { text: \"FUEL LEVEL\" }, subtitle: { text: \"LEVEL\"} }\r\n    const barometric_press_options = { ...options, title: { text: \"BAROMETRIC PRESSURE\" }, subtitle: { text: \"℃\"} }\r\n    const run_time_options = { ...options, title: { text: \"RUN TIME\" }, subtitle: { text: \"TIME(DAY:HH:MM\"} }\r\n    const distance_options = { ...options, title: { text: \"DISTANCE\" }, subtitle: { text: \"℃\"} }\r\n    const coolant_temp_options = { ...options, title: { text: \"COOLANT TEMPERATURE\" }, subtitle: { text: \"℃\"} }\r\n\r\n    // 데이터들 중 원하는 것만 취사 선택해서 그래프에 표시할 데이터로 포맷.\r\n    const getSeries = (key) => {\r\n        const series = [\r\n          {\r\n            name: key,\r\n            data: data.map((item) => ({\r\n              x: new Date(item.timeStamp).getTime(),\r\n              y: item[key], // 값이 없으면 0으로 초기화\r\n            })),\r\n          },\r\n        ];\r\n        return series;\r\n      };\r\n\r\n    console.log(getSeries(\"speed\"));\r\n\r\n    return (\r\n    <div className=\"Graphs\">\r\n        <div className=\"wrap\">\r\n            <div className=\"head\">\r\n                <div className=\"title\">\r\n                    Data Graph\r\n                </div>\r\n                <div className=\"download-button\" onClick={downloadData}>\r\n                    <i class=\"fa-solid fa-download\"/>\r\n                    <div className=\"download\">Download</div>\r\n                </div>\r\n            </div>\r\n            <hr color=\"#E5E5E5\"/>\r\n            <div className=\"time-setting\">\r\n                <div className=\"title\">TIME RANGE :</div>\r\n                <div className=\"from\">FROM</div>\r\n                <div className=\"start-time\">\r\n                    <input type=\"datetime-local\" id=\"start\" value={props.startTime} onChange={handleStartTimeChange}/>\r\n                </div>\r\n                <div className=\"to\">TO</div>\r\n                <div className=\"finish-time\">\r\n                    <input type=\"datetime-local\" id=\"finish\" value={props.finishTime} onChange={handleFinishTimeChange}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body\">\r\n                <Chart options={options} series={getSeries(\"speed\")} type=\"area\" height={350}/>\r\n                <Chart options={rpm_options} series={getSeries(\"rpm\")} type=\"area\" height={350}/>\r\n                <Chart options={engine_load_options} series={getSeries(\"engineLoad\")} type=\"area\" height={350}/>\r\n                <Chart options={throttle_pos_options} series={getSeries(\"throttlePos\")} type=\"area\" height={350}/>\r\n                <Chart options={fuel_level_options} series={getSeries(\"fuelLevel\")} type=\"area\" height={350}/>\r\n                <Chart options={barometric_press_options} series={getSeries(\"barometricPress\")} type=\"area\" height={350}/>\r\n                <Chart options={run_time_options} series={getSeries(\"runTime\")} type=\"area\" height={350}/>\r\n                <Chart options={distance_options} series={getSeries(\"distance\")} type=\"area\" height={350}/>\r\n                <Chart options={coolant_temp_options} series={getSeries(\"coolantTemp\")} type=\"area\" height={350}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default GraphDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}